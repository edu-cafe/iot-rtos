###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      11/Mar/2013  20:18:52 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\BookSrc_CM3_IAR\Software\uC-Probe\Target\Communicatio #
#                    n\Generic\RS-232\Source\probe_rs232.c                    #
#    Command line =  C:\BookSrc_CM3_IAR\Software\uC-Probe\Target\Communicatio #
#                    n\Generic\RS-232\Source\probe_rs232.c -lCN               #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\List\ -o C:\BookSrc_CM3_IAR\Software\EvalB #
#                    oards\ST\MANGO-Z1\IAR\OS-Probe\Flash\Obj\ --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MA #
#                    NGO-Z1\IAR\OS-Probe\..\BSP\ -I                           #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\CPU\ST\STM32\inc\ -I              #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-CPU\ -I                        #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\ -I      #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-LCD\Source\ -I                 #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-LIB\ -I                        #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Gener #
#                    ic\IAR\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MAN #
#                    GO-Z1\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\ -I     #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Gen #
#                    eric\RS-232\Source\ -I C:\BookSrc_CM3_IAR\Software\EvalB #
#                    oards\ST\MANGO-Z1\IAR\OS-Probe\..\..\..\..\..\uC-Probe\T #
#                    arget\Communication\Generic\RS-232\Ports\ST\STM32\ -I    #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Gen #
#                    eric\Source\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\S #
#                    T\MANGO-Z1\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\P #
#                    lugins\uCOS-II\ -Ol --use_c++_inline                     #
#    List file    =  C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\List\probe_rs232.lst                       #
#    Object file  =  C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\Obj\probe_rs232.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\BookSrc_CM3_IAR\Software\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c
      1          /*
      2          *********************************************************************************************************
      3          *                                       uC/Probe Communication
      4          *
      5          *                         (c) Copyright 2007-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                        COMMUNICATION: RS-232
     18          *
     19          * Filename      : probe_rs232.c
     20          * Version       : V2.20
     21          * Programmer(s) : BAN
     22          *********************************************************************************************************
     23          * Note(s)       : (1) The abbreviations RX and TX refer to communication from the target's perspective.
     24          *
     25          *                 (2) The abbreviations RD and WR refer to reading data from the target memory and
     26          *                     writing data to the target memory, respectively.
     27          *********************************************************************************************************
     28          */
     29          
     30          
     31          /*
     32          *********************************************************************************************************
     33          *                                            INCLUDE FILES
     34          *********************************************************************************************************
     35          */
     36          
     37          #define    PROBE_RS232_MODULE
     38          #include  <probe_com.h>
     39          #include  <probe_rs232.h>

   \                                 In section .bss, align 4
   \   __absolute CPU_INT32U ProbeRS232_RxCtr
   \                     ProbeRS232_RxCtr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute CPU_INT32U ProbeRS232_TxCtr
   \                     ProbeRS232_TxCtr:
   \   00000000                      DS8 4
     40          
     41          
     42          /*
     43          *********************************************************************************************************
     44          *                                               ENABLE
     45          *
     46          * Note(s) : (1) See 'probe_rs232.h  ENABLE'.
     47          *********************************************************************************************************
     48          */
     49          
     50          #if (PROBE_COM_CFG_RS232_EN == DEF_ENABLED)                     /* See Note #1.                                         */
     51          
     52          
     53          /*
     54          *********************************************************************************************************
     55          *                                            LOCAL DEFINES
     56          *********************************************************************************************************
     57          */
     58          
     59          /*
     60          *********************************************************************************************************
     61          *                                        RS-232 PACKET FORMAT
     62          *
     63          * Note(s):  (1) All packets include the following parts:
     64          *
     65          *                   (A)  4 1-byte start delimiters, forming the ASCII representation of "uCPr".  These
     66          *                        are the constants PROBE_RS232_PROTOCOL_RX_SD0-PROBE_RS232_PROTOCOL_?X_SD4;
     67          *                   (B)  1 2-byte length, the length of the data segment;
     68          *                   (C)  1 2-byte padding, unused;
     69          *                   (D)  n   bytes of data; and
     70          *                   (E)  1 1-byte checksum; and
     71          *                   (F)  1 1-byte end delimiter, the character '/', which is the constant PROBE_RS232_PROTOCOL_?X_ED.
     72          *
     73          *                                       +-------------------+-------------------+
     74          *                                       |   'u'   |   'C'   |   'P'   |   'r'   |
     75          *                                       +-------------------+-------------------+
     76          *                                       |       Length      |     Padding       |
     77          *                                       +-------------------+-------------------+
     78          *                                       |                  Data                 |   The data segment does not need to end on
     79          *                                       |                   .                   |   a four-byte boundary, as might be inferred
     80          *                                       |                   .                   |   from this diagram.
     81          *                                       |                   .                   |
     82          *                                       +-------------------+-------------------+
     83          *                                       | Checksum|   '/'   |
     84          *                                       +-------------------+
     85          *********************************************************************************************************
     86          */
     87          
     88                                                                          /* ------------- INBOUND PACKET DELIMITERS ------------ */
     89          #define  PROBE_RS232_PROTOCOL_RX_SD0                    0x75    /* Start delimiters.                                    */
     90          #define  PROBE_RS232_PROTOCOL_RX_SD1                    0x43
     91          #define  PROBE_RS232_PROTOCOL_RX_SD2                    0x50
     92          #define  PROBE_RS232_PROTOCOL_RX_SD3                    0x72
     93          #define  PROBE_RS232_PROTOCOL_RX_ED                     0x2F    /* End   delimiter.                                     */
     94          
     95                                                                          /* ------------ OUTBOUND PACKET DELIMITERS ------------ */
     96          #define  PROBE_RS232_PROTOCOL_TX_SD0                    0x75    /* Start delimiters.                                    */
     97          #define  PROBE_RS232_PROTOCOL_TX_SD1                    0x43
     98          #define  PROBE_RS232_PROTOCOL_TX_SD2                    0x50
     99          #define  PROBE_RS232_PROTOCOL_TX_SD3                    0x72
    100          #define  PROBE_RS232_PROTOCOL_TX_ED                     0x2F    /* End   delimiter.                                     */
    101          
    102                                                                          /* ----------- RECEIVE STATE MACHINE STATES ----------- */
    103          #define  PROBE_RS232_RX_STATE_SD0                          0    /* Waiting for start first  start delimiter (SD0).      */
    104          #define  PROBE_RS232_RX_STATE_SD1                          1    /* Waiting for start second start delimiter (SD1).      */
    105          #define  PROBE_RS232_RX_STATE_SD2                          2    /* Waiting for start third  start delimiter (SD2).      */
    106          #define  PROBE_RS232_RX_STATE_SD3                          3    /* Waiting for start fourth start delimiter (SD3).      */
    107          #define  PROBE_RS232_RX_STATE_LEN1                         4    /* Waiting for length,  first  byte.                    */
    108          #define  PROBE_RS232_RX_STATE_LEN2                         5    /* Waiting for length,  second byte.                    */
    109          #define  PROBE_RS232_RX_STATE_PAD1                         6    /* Waiting for padding, first  byte.                    */
    110          #define  PROBE_RS232_RX_STATE_PAD2                         7    /* Waiting for padding, second byte.                    */
    111          #define  PROBE_RS232_RX_STATE_DATA                         8    /* Waiting for data.                                    */
    112          #define  PROBE_RS232_RX_STATE_CHKSUM                       9    /* Waiting for checksum.                                */
    113          #define  PROBE_RS232_RX_STATE_ED                          10    /* Waiting for end delimiter.                           */
    114          
    115                                                                          /* ---------- TRANSMIT STATE MACHINE STATES ----------- */
    116          #define  PROBE_RS232_TX_STATE_SD0                          0    /* Waiting to send start first  start delim. (SD0).     */
    117          #define  PROBE_RS232_TX_STATE_SD1                          1    /* Waiting to send start second start delim. (SD1).     */
    118          #define  PROBE_RS232_TX_STATE_SD2                          2    /* Waiting to send start third  start delim. (SD2).     */
    119          #define  PROBE_RS232_TX_STATE_SD3                          3    /* Waiting to send start fourth start delim. (SD3).     */
    120          #define  PROBE_RS232_TX_STATE_LEN1                         4    /* Waiting to send length,  first  byte.                */
    121          #define  PROBE_RS232_TX_STATE_LEN2                         5    /* Waiting to send length,  second byte.                */
    122          #define  PROBE_RS232_TX_STATE_PAD1                         6    /* Waiting to send padding, first  byte.                */
    123          #define  PROBE_RS232_TX_STATE_PAD2                         7    /* Waiting to send padding, second byte.                */
    124          #define  PROBE_RS232_TX_STATE_DATA                         8    /* Waiting to send data.                                */
    125          #define  PROBE_RS232_TX_STATE_CHKSUM                       9    /* Waiting to send checksum.                            */
    126          #define  PROBE_RS232_TX_STATE_ED                          10    /* Waiting to send end delimiter.                       */
    127          
    128          #define  PROBE_RS232_CHKSUM_EN                      DEF_FALSE    /* DO NOT CHANGE                                        */
    129          
    130          
    131          /*
    132          *********************************************************************************************************
    133          *                                           LOCAL CONSTANTS
    134          *********************************************************************************************************
    135          */
    136          
    137          
    138          /*
    139          *********************************************************************************************************
    140          *                                          LOCAL DATA TYPES
    141          *********************************************************************************************************
    142          */
    143          
    144          
    145          /*
    146          *********************************************************************************************************
    147          *                                            LOCAL TABLES
    148          *********************************************************************************************************
    149          */
    150          
    151          
    152          /*
    153          *********************************************************************************************************
    154          *                                       LOCAL GLOBAL VARIABLES
    155          *********************************************************************************************************
    156          */
    157          
    158                                                                          /* ---------------- RX STATE VARIABLES ---------------- */

   \                                 In section .bss, align 1
    159          static  CPU_INT08U   ProbeRS232_RxState;                        /* Current state of rx state machine.                   */
   \                     ProbeRS232_RxState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    160          static  CPU_SIZE_T   ProbeRS232_RxLenRem;                       /* Rem bytes of data to rd.                             */
   \                     ProbeRS232_RxLenRem:
   \   00000000                      DS8 4
    161          

   \                                 In section .bss, align 4
    162          static  CPU_SIZE_T   ProbeRS232_RxLen;                          /* Length  of data in current pkt.                      */
   \                     ProbeRS232_RxLen:
   \   00000000                      DS8 4
    163                                                                          /* Data    of current pkt.                              */

   \                                 In section .bss, align 4
    164          static  CPU_INT08U   ProbeRS232_RxBuf[PROBE_RS232_CFG_RX_BUF_SIZE];
   \                     ProbeRS232_RxBuf:
   \   00000000                      DS8 512
    165          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    166          static  CPU_INT08U   ProbeRS232_RxChkSum;                       /* Checksum of current pkt.                             */
    167          #endif
    168          

   \                                 In section .bss, align 4
    169          static  CPU_SIZE_T   ProbeRS232_RxBufWrIx;                      /* Index of next write; also number of bytes in buf.    */
   \                     ProbeRS232_RxBufWrIx:
   \   00000000                      DS8 4
    170          
    171          
    172                                                                          /* ---------------- TX STATE VARIABLES ---------------- */

   \                                 In section .bss, align 1
    173          static  CPU_INT08U   ProbeRS232_TxState;                        /* Current state of tx state machine.                   */
   \                     ProbeRS232_TxState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    174          static  CPU_BOOLEAN  ProbeRS232_TxActiveFlag;                   /* Indicates tx is currently active.                    */
   \                     ProbeRS232_TxActiveFlag:
   \   00000000                      DS8 1
    175          

   \                                 In section .bss, align 4
    176          static  CPU_SIZE_T   ProbeRS232_TxLen;                          /* Length  of data in current pkt.                      */
   \                     ProbeRS232_TxLen:
   \   00000000                      DS8 4
    177                                                                          /* Data    of current pkt.                              */

   \                                 In section .bss, align 4
    178          static  CPU_INT08U   ProbeRS232_TxBuf[PROBE_RS232_CFG_TX_BUF_SIZE];
   \                     ProbeRS232_TxBuf:
   \   00000000                      DS8 512
    179          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    180          static  CPU_INT08U   ProbeRS232_TxChkSum;                       /* Checksum of current pkt.                             */
    181          #endif
    182          

   \                                 In section .bss, align 1
    183          static  CPU_BOOLEAN  ProbeRS232_TxBufInUse;                     /* Indicates tx buf currently holds a pkt.              */
   \                     ProbeRS232_TxBufInUse:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    184          static  CPU_SIZE_T   ProbeRS232_TxBufRdIx;                      /* Index of next read.                                  */
   \                     ProbeRS232_TxBufRdIx:
   \   00000000                      DS8 4
    185          
    186          
    187          
    188          /*
    189          *********************************************************************************************************
    190          *                                      LOCAL FUNCTION PROTOTYPES
    191          *********************************************************************************************************
    192          */
    193          
    194          static  CPU_SIZE_T  ProbeRS232_ParseRxPkt(void);
    195          
    196          static  void        ProbeRS232_RxPkt     (void);
    197          
    198          static  void        ProbeRS232_RxStoINT8U(CPU_INT08U  rx_data);
    199          
    200          static  void        ProbeRS232_RxBufClr  (void);
    201          
    202          static  void        ProbeRS232_TxStart   (void);
    203          
    204          
    205          /*
    206          *********************************************************************************************************
    207          *                                     LOCAL CONFIGURATION ERRORS
    208          *********************************************************************************************************
    209          */
    210          
    211          
    212          /*
    213          *********************************************************************************************************
    214          *                                          ProbeRS232_Init()
    215          *
    216          * Description : Initialize the RS-232 communication module.
    217          *
    218          * Argument(s) : baud_rate       The RS-232 baud rate which will be passed to the hardware initialization.
    219          *
    220          * Return(s)   : none.
    221          *
    222          * Caller(s)   : Application.
    223          *
    224          * Note(s)     : none.
    225          *********************************************************************************************************
    226          */
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void  ProbeRS232_Init (CPU_INT32U baud_rate)
    229          {
   \                     ProbeRS232_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    230              ProbeRS232_RxState             =  PROBE_RS232_RX_STATE_SD0; /* Setup rx & tx state machines.                        */
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    231              ProbeRS232_TxState             =  PROBE_RS232_TX_STATE_SD0;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    232          
    233              ProbeRS232_TxLen               =  0;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    234              ProbeRS232_TxActiveFlag        =  DEF_FALSE;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x7001             STRB     R1,[R0, #+0]
    235              ProbeRS232_TxBufInUse          =  DEF_FALSE;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    236          
    237          #if (PROBE_COM_CFG_STAT_EN         == DEF_ENABLED)
    238              ProbeRS232_RxCtr               =  0;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6001             STR      R1,[R0, #+0]
    239              ProbeRS232_TxCtr               =  0;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    240          #endif
    241          
    242          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    243              ProbeRS232_OS_Init();
   \   0000003C   0x.... 0x....      BL       ProbeRS232_OS_Init
    244          #endif
    245          
    246              ProbeRS232_InitTarget(baud_rate);                           /* Init target-specific code.                           */
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       ProbeRS232_InitTarget
    247          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    248          
    249          
    250          /*
    251          *********************************************************************************************************
    252          *********************************************************************************************************
    253          *                                         INTERNAL FUNCTIONS
    254          *********************************************************************************************************
    255          *********************************************************************************************************
    256          */
    257          
    258          /*
    259          *********************************************************************************************************
    260          *                                          ProbeRS232_Task()
    261          *
    262          * Description : The task which parses the received packet, forms a response, and begins transmission.
    263          *
    264          * Argument(s) : p_arg       The argument passed to 'ProbeRS232_Task()' by  'ProbeRS232_OS_Task()'.
    265          *
    266          * Return(s)   : none.
    267          *
    268          * Caller(s)   : ProbeRS232_OS_Task().
    269          *
    270          * Note(s)     : none.
    271          *********************************************************************************************************
    272          */
    273          
    274          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    275          void  ProbeRS232_Task (void *p_arg)
    276          {
   \                     ProbeRS232_Task:
   \   00000000   0xB580             PUSH     {R7,LR}
    277              CPU_SIZE_T  len;
    278          
    279          
    280              (void)p_arg;
    281          
    282              while (DEF_TRUE) {
    283                  ProbeRS232_OS_Pend();                                   /* Wait for a packet to be received.                    */
   \                     ??ProbeRS232_Task_0:
   \   00000002   0x.... 0x....      BL       ProbeRS232_OS_Pend
    284          
    285                  len = ProbeRS232_ParseRxPkt();                          /* Parse packet and formulate a response.               */
   \   00000006   0x.... 0x....      BL       ProbeRS232_ParseRxPkt
    286          
    287                  if (len > 0) {                                          /* If we have a response.                               */
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD0F9             BEQ.N    ??ProbeRS232_Task_0
    288                      ProbeRS232_TxLen = len;
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000012   0x6008             STR      R0,[R1, #+0]
    289                      ProbeRS232_TxStart();
   \   00000014   0x.... 0x....      BL       ProbeRS232_TxStart
   \   00000018   0xE7F3             B.N      ??ProbeRS232_Task_0
    290                  }
    291              }
    292          }
    293          #endif
    294          
    295          
    296          /*
    297          *********************************************************************************************************
    298          *                                        ProbeRS232_RxHandler()
    299          *
    300          * Description : Handle a received byte.
    301          *
    302          * Argument(s) : rx_data     Received data byte.
    303          *
    304          * Return(s)   : none.
    305          *
    306          * Caller(s)   : Rx ISR.
    307          *
    308          * Note(s)     : none.
    309          *********************************************************************************************************
    310          */
    311          

   \                                 In section .text, align 2, keep-with-next
    312          void  ProbeRS232_RxHandler (CPU_INT08U rx_data)
    313          {
   \                     ProbeRS232_RxHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    314          #if (PROBE_COM_CFG_STAT_EN == DEF_ENABLED)
    315              ProbeRS232_RxCtr++;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable7_5
   \   0000000E   0x6011             STR      R1,[R2, #+0]
    316          #endif
    317          
    318              switch (ProbeRS232_RxState) {
   \   00000010   0x....             LDR.N    R1,??DataTable7
   \   00000012   0x7809             LDRB     R1,[R1, #+0]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD00F             BEQ.N    ??ProbeRS232_RxHandler_0
   \   00000018   0x2902             CMP      R1,#+2
   \   0000001A   0xD021             BEQ.N    ??ProbeRS232_RxHandler_1
   \   0000001C   0xD315             BCC.N    ??ProbeRS232_RxHandler_2
   \   0000001E   0x2904             CMP      R1,#+4
   \   00000020   0xD034             BEQ.N    ??ProbeRS232_RxHandler_3
   \   00000022   0xD328             BCC.N    ??ProbeRS232_RxHandler_4
   \   00000024   0x2906             CMP      R1,#+6
   \   00000026   0xD054             BEQ.N    ??ProbeRS232_RxHandler_5
   \   00000028   0xD337             BCC.N    ??ProbeRS232_RxHandler_6
   \   0000002A   0x2908             CMP      R1,#+8
   \   0000002C   0xD059             BEQ.N    ??ProbeRS232_RxHandler_7
   \   0000002E   0xD354             BCC.N    ??ProbeRS232_RxHandler_8
   \   00000030   0x290A             CMP      R1,#+10
   \   00000032   0xD06A             BEQ.N    ??ProbeRS232_RxHandler_9
   \   00000034   0xD365             BCC.N    ??ProbeRS232_RxHandler_10
   \   00000036   0xE071             B.N      ??ProbeRS232_RxHandler_11
    319                  case PROBE_RS232_RX_STATE_SD0:                          /* Rx'd the start 1st start delimiter (SD0).            */
    320                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD0) {
   \                     ??ProbeRS232_RxHandler_0:
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2875             CMP      R0,#+117
   \   0000003C   0xD104             BNE.N    ??ProbeRS232_RxHandler_12
    321                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD1;
   \   0000003E   0x....             LDR.N    R0,??DataTable7
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    322                           ProbeRS232_RxBufClr();
   \   00000044   0x.... 0x....      BL       ProbeRS232_RxBufClr
    323                       }
    324                       break;
   \                     ??ProbeRS232_RxHandler_12:
   \   00000048   0xE06B             B.N      ??ProbeRS232_RxHandler_13
    325          
    326          
    327                  case PROBE_RS232_RX_STATE_SD1:                          /* Rx'd the start 2nd start delimiter (SD1).            */
    328                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD1) {
   \                     ??ProbeRS232_RxHandler_2:
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2843             CMP      R0,#+67
   \   0000004E   0xD103             BNE.N    ??ProbeRS232_RxHandler_14
    329                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD2;
   \   00000050   0x....             LDR.N    R0,??DataTable7
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x7001             STRB     R1,[R0, #+0]
   \   00000056   0xE002             B.N      ??ProbeRS232_RxHandler_15
    330                       } else {
    331                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_14:
   \   00000058   0x....             LDR.N    R0,??DataTable7
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    332                       }
    333                       break;
   \                     ??ProbeRS232_RxHandler_15:
   \   0000005E   0xE060             B.N      ??ProbeRS232_RxHandler_13
    334          
    335          
    336                  case PROBE_RS232_RX_STATE_SD2:                          /* Rx'd the start 3rd start delimiter (SD2).            */
    337                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD2) {
   \                     ??ProbeRS232_RxHandler_1:
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x2850             CMP      R0,#+80
   \   00000064   0xD103             BNE.N    ??ProbeRS232_RxHandler_16
    338                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD3;
   \   00000066   0x....             LDR.N    R0,??DataTable7
   \   00000068   0x2103             MOVS     R1,#+3
   \   0000006A   0x7001             STRB     R1,[R0, #+0]
   \   0000006C   0xE002             B.N      ??ProbeRS232_RxHandler_17
    339                       } else {
    340                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_16:
   \   0000006E   0x....             LDR.N    R0,??DataTable7
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x7001             STRB     R1,[R0, #+0]
    341                       }
    342                       break;
   \                     ??ProbeRS232_RxHandler_17:
   \   00000074   0xE055             B.N      ??ProbeRS232_RxHandler_13
    343          
    344          
    345                  case PROBE_RS232_RX_STATE_SD3:                          /* Rx'd the start 4th start delimiter (SD3).            */
    346                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD3) {
   \                     ??ProbeRS232_RxHandler_4:
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2872             CMP      R0,#+114
   \   0000007A   0xD103             BNE.N    ??ProbeRS232_RxHandler_18
    347                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_LEN1;
   \   0000007C   0x....             LDR.N    R0,??DataTable7
   \   0000007E   0x2104             MOVS     R1,#+4
   \   00000080   0x7001             STRB     R1,[R0, #+0]
   \   00000082   0xE002             B.N      ??ProbeRS232_RxHandler_19
    348                       } else {
    349                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_18:
   \   00000084   0x....             LDR.N    R0,??DataTable7
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x7001             STRB     R1,[R0, #+0]
    350                       }
    351                       break;
   \                     ??ProbeRS232_RxHandler_19:
   \   0000008A   0xE04A             B.N      ??ProbeRS232_RxHandler_13
    352          
    353          
    354                  case PROBE_RS232_RX_STATE_LEN1:                         /* Rx'd the 1st len byte.                               */
    355          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    356                       ProbeRS232_RxChkSum = rx_data;
    357          #endif
    358                       ProbeRS232_RxLenRem = rx_data;
   \                     ??ProbeRS232_RxHandler_3:
   \   0000008C   0x....             LDR.N    R1,??DataTable7_7
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x6008             STR      R0,[R1, #+0]
    359                       ProbeRS232_RxState  = PROBE_RS232_RX_STATE_LEN2;
   \   00000092   0x....             LDR.N    R0,??DataTable7
   \   00000094   0x2105             MOVS     R1,#+5
   \   00000096   0x7001             STRB     R1,[R0, #+0]
    360                       break;
   \   00000098   0xE043             B.N      ??ProbeRS232_RxHandler_13
    361          
    362          
    363                  case PROBE_RS232_RX_STATE_LEN2:                         /* Rx'd the 2nd len byte.                               */
    364          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    365                       ProbeRS232_RxChkSum += rx_data;
    366          #endif
    367                       ProbeRS232_RxLenRem |= rx_data << 8;
   \                     ??ProbeRS232_RxHandler_6:
   \   0000009A   0x....             LDR.N    R1,??DataTable7_7
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000A4   0x....             LDR.N    R1,??DataTable7_7
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    368          
    369                                                                          /* Chk len.                                             */
    370                       if ((ProbeRS232_RxLenRem == 0) || (ProbeRS232_RxLenRem > PROBE_RS232_CFG_RX_BUF_SIZE)) {
   \   000000A8   0x....             LDR.N    R0,??DataTable7_7
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD004             BEQ.N    ??ProbeRS232_RxHandler_20
   \   000000B0   0x....             LDR.N    R0,??DataTable7_7
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0xF5B0 0x7F00      CMP      R0,#+512
   \   000000B8   0xD903             BLS.N    ??ProbeRS232_RxHandler_21
    371                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_20:
   \   000000BA   0x....             LDR.N    R0,??DataTable7
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x7001             STRB     R1,[R0, #+0]
   \   000000C0   0xE006             B.N      ??ProbeRS232_RxHandler_22
    372                       } else {
    373                           ProbeRS232_RxLen   = ProbeRS232_RxLenRem;
   \                     ??ProbeRS232_RxHandler_21:
   \   000000C2   0x....             LDR.N    R0,??DataTable7_8
   \   000000C4   0x....             LDR.N    R1,??DataTable7_7
   \   000000C6   0x6809             LDR      R1,[R1, #+0]
   \   000000C8   0x6001             STR      R1,[R0, #+0]
    374                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD1;
   \   000000CA   0x....             LDR.N    R0,??DataTable7
   \   000000CC   0x2106             MOVS     R1,#+6
   \   000000CE   0x7001             STRB     R1,[R0, #+0]
    375                       }
    376                       break;
   \                     ??ProbeRS232_RxHandler_22:
   \   000000D0   0xE027             B.N      ??ProbeRS232_RxHandler_13
    377          
    378          
    379                  case PROBE_RS232_RX_STATE_PAD1:                         /* Rx'd the 1st padding byte.                           */
    380                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD2;
   \                     ??ProbeRS232_RxHandler_5:
   \   000000D2   0x....             LDR.N    R0,??DataTable7
   \   000000D4   0x2107             MOVS     R1,#+7
   \   000000D6   0x7001             STRB     R1,[R0, #+0]
    381                       break;
   \   000000D8   0xE023             B.N      ??ProbeRS232_RxHandler_13
    382          
    383          
    384                  case PROBE_RS232_RX_STATE_PAD2:                         /* Rx'd the 2nd  padding byte.                          */
    385                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_DATA;
   \                     ??ProbeRS232_RxHandler_8:
   \   000000DA   0x....             LDR.N    R0,??DataTable7
   \   000000DC   0x2108             MOVS     R1,#+8
   \   000000DE   0x7001             STRB     R1,[R0, #+0]
    386                       break;
   \   000000E0   0xE01F             B.N      ??ProbeRS232_RxHandler_13
    387          
    388          
    389                  case PROBE_RS232_RX_STATE_DATA:                         /* Rx'd data.                                           */
    390                       ProbeRS232_RxStoINT8U(rx_data);
   \                     ??ProbeRS232_RxHandler_7:
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       ProbeRS232_RxStoINT8U
    391          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    392                       ProbeRS232_RxChkSum += rx_data;
    393          #endif
    394                       ProbeRS232_RxLenRem--;
   \   000000E8   0x....             LDR.N    R0,??DataTable7_7
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x1E40             SUBS     R0,R0,#+1
   \   000000EE   0x....             LDR.N    R1,??DataTable7_7
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    395                       if (ProbeRS232_RxLenRem == 0) {
   \   000000F2   0x....             LDR.N    R0,??DataTable7_7
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD102             BNE.N    ??ProbeRS232_RxHandler_23
    396                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_CHKSUM;
   \   000000FA   0x....             LDR.N    R0,??DataTable7
   \   000000FC   0x2109             MOVS     R1,#+9
   \   000000FE   0x7001             STRB     R1,[R0, #+0]
    397                       }
    398                       break;
   \                     ??ProbeRS232_RxHandler_23:
   \   00000100   0xE00F             B.N      ??ProbeRS232_RxHandler_13
    399          
    400          
    401                  case PROBE_RS232_RX_STATE_CHKSUM:                       /* Rx'd the checksum.                                   */
    402          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    403                       ProbeRS232_RxChkSum += rx_data;
    404                       if ((ProbeRS232_RxChkSum & 0xFF) == 0x00) {
    405                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
    406                       } else {
    407                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    408                       }
    409          #else
    410                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
   \                     ??ProbeRS232_RxHandler_10:
   \   00000102   0x....             LDR.N    R0,??DataTable7
   \   00000104   0x210A             MOVS     R1,#+10
   \   00000106   0x7001             STRB     R1,[R0, #+0]
    411          #endif
    412                       break;
   \   00000108   0xE00B             B.N      ??ProbeRS232_RxHandler_13
    413          
    414          
    415                  case PROBE_RS232_RX_STATE_ED:                           /* Rx'd the end delimiter.                              */
    416                       if (rx_data == PROBE_RS232_PROTOCOL_RX_ED) {
   \                     ??ProbeRS232_RxHandler_9:
   \   0000010A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010C   0x282F             CMP      R0,#+47
   \   0000010E   0xD101             BNE.N    ??ProbeRS232_RxHandler_24
    417                           ProbeRS232_RxPkt();                            /* Parse rx'd pkt.                                      */
   \   00000110   0x.... 0x....      BL       ProbeRS232_RxPkt
    418                       }
    419                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_24:
   \   00000114   0x....             LDR.N    R0,??DataTable7
   \   00000116   0x2100             MOVS     R1,#+0
   \   00000118   0x7001             STRB     R1,[R0, #+0]
    420                       break;
   \   0000011A   0xE002             B.N      ??ProbeRS232_RxHandler_13
    421          
    422          
    423                  default:
    424                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
   \                     ??ProbeRS232_RxHandler_11:
   \   0000011C   0x....             LDR.N    R0,??DataTable7
   \   0000011E   0x2100             MOVS     R1,#+0
   \   00000120   0x7001             STRB     R1,[R0, #+0]
    425                       break;
    426              }
    427          }
   \                     ??ProbeRS232_RxHandler_13:
   \   00000122   0xBD01             POP      {R0,PC}          ;; return
    428          
    429          
    430          /*
    431          *********************************************************************************************************
    432          *                                       ProbeRS232_TxHandler()
    433          *
    434          * Description : Handle a byte transmission.
    435          *
    436          * Argument(s) : none.
    437          *
    438          * Return(s)   : none.
    439          *
    440          * Caller(s)   : Tx ISR.
    441          *
    442          * Note(s)     : none.
    443          *********************************************************************************************************
    444          */
    445          

   \                                 In section .text, align 2, keep-with-next
    446          void  ProbeRS232_TxHandler (void)
    447          {
   \                     ProbeRS232_TxHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    448              CPU_INT08U  tx_data;
    449          
    450          
    451          #if (PROBE_COM_CFG_STAT_EN == DEF_ENABLED)
    452              if ((ProbeRS232_TxState != PROBE_RS232_TX_STATE_SD0) ||
    453                  (ProbeRS232_TxLen    > 0                       )) {
   \   00000002   0x....             LDR.N    R0,??DataTable7_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE.N    ??ProbeRS232_TxHandler_0
   \   0000000A   0x....             LDR.N    R0,??DataTable7_2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD004             BEQ.N    ??ProbeRS232_TxHandler_1
    454                  ProbeRS232_TxCtr++;
   \                     ??ProbeRS232_TxHandler_0:
   \   00000012   0x....             LDR.N    R0,??DataTable7_6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_6
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    455              }
    456          #endif
    457          
    458              switch (ProbeRS232_TxState) {
   \                     ??ProbeRS232_TxHandler_1:
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD00F             BEQ.N    ??ProbeRS232_TxHandler_2
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD02B             BEQ.N    ??ProbeRS232_TxHandler_3
   \   00000028   0xD323             BCC.N    ??ProbeRS232_TxHandler_4
   \   0000002A   0x2804             CMP      R0,#+4
   \   0000002C   0xD036             BEQ.N    ??ProbeRS232_TxHandler_5
   \   0000002E   0xD32E             BCC.N    ??ProbeRS232_TxHandler_6
   \   00000030   0x2806             CMP      R0,#+6
   \   00000032   0xD046             BEQ.N    ??ProbeRS232_TxHandler_7
   \   00000034   0xD33B             BCC.N    ??ProbeRS232_TxHandler_8
   \   00000036   0x2808             CMP      R0,#+8
   \   00000038   0xD051             BEQ.N    ??ProbeRS232_TxHandler_9
   \   0000003A   0xD349             BCC.N    ??ProbeRS232_TxHandler_10
   \   0000003C   0x280A             CMP      R0,#+10
   \   0000003E   0xD06E             BEQ.N    ??ProbeRS232_TxHandler_11
   \   00000040   0xD366             BCC.N    ??ProbeRS232_TxHandler_12
   \   00000042   0xE076             B.N      ??ProbeRS232_TxHandler_13
    459                  case PROBE_RS232_TX_STATE_SD0:
    460                       if (ProbeRS232_TxLen > 0) {                        /* If pkt is waiting to be sent ...                     */
   \                     ??ProbeRS232_TxHandler_2:
   \   00000044   0x....             LDR.N    R0,??DataTable7_2
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD00C             BEQ.N    ??ProbeRS232_TxHandler_14
    461                           ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD0);   /*  ... tx start 1st start delimiter (SD0).             */
   \   0000004C   0x2075             MOVS     R0,#+117
   \   0000004E   0x.... 0x....      BL       ProbeRS232_Tx1
    462                           ProbeRS232_TxActiveFlag = DEF_TRUE;
   \   00000052   0x....             LDR.N    R0,??DataTable7_3
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x7001             STRB     R1,[R0, #+0]
    463                           ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD1;
   \   00000058   0x....             LDR.N    R0,??DataTable7_1
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    464                           ProbeRS232_TxBufRdIx    = 0;
   \   0000005E   0x....             LDR.N    R0,??DataTable7_9
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x6001             STR      R1,[R0, #+0]
   \   00000064   0xE004             B.N      ??ProbeRS232_TxHandler_15
    465          
    466                       } else {                                           /* If no pkt is waiting to be sent ...                  */
    467                           ProbeRS232_TxActiveFlag = DEF_FALSE;
   \                     ??ProbeRS232_TxHandler_14:
   \   00000066   0x....             LDR.N    R0,??DataTable7_3
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x7001             STRB     R1,[R0, #+0]
    468                           ProbeRS232_TxIntDis();                         /*  ... dis tx int's.                                   */
   \   0000006C   0x.... 0x....      BL       ProbeRS232_TxIntDis
    469                       }
    470                       break;
   \                     ??ProbeRS232_TxHandler_15:
   \   00000070   0xE067             B.N      ??ProbeRS232_TxHandler_16
    471          
    472          
    473                  case PROBE_RS232_TX_STATE_SD1:                          /* Tx start 2nd start delimiter (SD1).                  */
    474                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD1);
   \                     ??ProbeRS232_TxHandler_4:
   \   00000072   0x2043             MOVS     R0,#+67
   \   00000074   0x.... 0x....      BL       ProbeRS232_Tx1
    475                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD2;
   \   00000078   0x....             LDR.N    R0,??DataTable7_1
   \   0000007A   0x2102             MOVS     R1,#+2
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
    476                       break;
   \   0000007E   0xE060             B.N      ??ProbeRS232_TxHandler_16
    477          
    478          
    479                  case PROBE_RS232_TX_STATE_SD2:                          /* Tx start 3rd start delimiter (SD2).                  */
    480                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD2);
   \                     ??ProbeRS232_TxHandler_3:
   \   00000080   0x2050             MOVS     R0,#+80
   \   00000082   0x.... 0x....      BL       ProbeRS232_Tx1
    481                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD3;
   \   00000086   0x....             LDR.N    R0,??DataTable7_1
   \   00000088   0x2103             MOVS     R1,#+3
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
    482                       break;
   \   0000008C   0xE059             B.N      ??ProbeRS232_TxHandler_16
    483          
    484          
    485                  case PROBE_RS232_TX_STATE_SD3:                          /* Tx start 4th start delimiter (SD3).                  */
    486                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD3);
   \                     ??ProbeRS232_TxHandler_6:
   \   0000008E   0x2072             MOVS     R0,#+114
   \   00000090   0x.... 0x....      BL       ProbeRS232_Tx1
    487                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_LEN1;
   \   00000094   0x....             LDR.N    R0,??DataTable7_1
   \   00000096   0x2104             MOVS     R1,#+4
   \   00000098   0x7001             STRB     R1,[R0, #+0]
    488                       break;
   \   0000009A   0xE052             B.N      ??ProbeRS232_TxHandler_16
    489          
    490          
    491                  case PROBE_RS232_TX_STATE_LEN1:                         /* Tx 1st len byte.                                     */
    492                       tx_data             = ProbeRS232_TxLen & 0xFF;
   \                     ??ProbeRS232_TxHandler_5:
   \   0000009C   0x....             LDR.N    R0,??DataTable7_2
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
    493                       ProbeRS232_Tx1(tx_data);
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x.... 0x....      BL       ProbeRS232_Tx1
    494                       ProbeRS232_TxState  = PROBE_RS232_TX_STATE_LEN2;
   \   000000A6   0x....             LDR.N    R0,??DataTable7_1
   \   000000A8   0x2105             MOVS     R1,#+5
   \   000000AA   0x7001             STRB     R1,[R0, #+0]
    495          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    496                       ProbeRS232_TxChkSum = tx_data;
    497          #endif
    498                       break;
   \   000000AC   0xE049             B.N      ??ProbeRS232_TxHandler_16
    499          
    500          
    501                  case PROBE_RS232_TX_STATE_LEN2:                         /* Tx 2nd len byte.                                     */
    502                       tx_data              = ProbeRS232_TxLen >> 8;
   \                     ??ProbeRS232_TxHandler_8:
   \   000000AE   0x....             LDR.N    R0,??DataTable7_2
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x0A00             LSRS     R0,R0,#+8
    503                       ProbeRS232_Tx1(tx_data);
   \   000000B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B6   0x.... 0x....      BL       ProbeRS232_Tx1
    504                       ProbeRS232_TxState   = PROBE_RS232_TX_STATE_PAD1;
   \   000000BA   0x....             LDR.N    R0,??DataTable7_1
   \   000000BC   0x2106             MOVS     R1,#+6
   \   000000BE   0x7001             STRB     R1,[R0, #+0]
    505          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    506                       ProbeRS232_TxChkSum += tx_data;
    507          #endif
    508                       break;
   \   000000C0   0xE03F             B.N      ??ProbeRS232_TxHandler_16
    509          
    510          
    511                  case PROBE_RS232_TX_STATE_PAD1:                         /* Tx 1st padding byte.                                 */
    512                       ProbeRS232_Tx1(0);
   \                     ??ProbeRS232_TxHandler_7:
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      BL       ProbeRS232_Tx1
    513                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_PAD2;
   \   000000C8   0x....             LDR.N    R0,??DataTable7_1
   \   000000CA   0x2107             MOVS     R1,#+7
   \   000000CC   0x7001             STRB     R1,[R0, #+0]
    514                       break;
   \   000000CE   0xE038             B.N      ??ProbeRS232_TxHandler_16
    515          
    516          
    517                  case PROBE_RS232_TX_STATE_PAD2:                         /* Tx 2nd padding byte.                                 */
    518                       ProbeRS232_Tx1(0);
   \                     ??ProbeRS232_TxHandler_10:
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       ProbeRS232_Tx1
    519                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_DATA;
   \   000000D6   0x....             LDR.N    R0,??DataTable7_1
   \   000000D8   0x2108             MOVS     R1,#+8
   \   000000DA   0x7001             STRB     R1,[R0, #+0]
    520                       break;
   \   000000DC   0xE031             B.N      ??ProbeRS232_TxHandler_16
    521          
    522          
    523                  case PROBE_RS232_TX_STATE_DATA:                         /* Tx data.                                             */
    524                       tx_data = ProbeRS232_TxBuf[ProbeRS232_TxBufRdIx];
   \                     ??ProbeRS232_TxHandler_9:
   \   000000DE   0x....             LDR.N    R0,??DataTable7_9
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x....             LDR.N    R1,??DataTable7_10
   \   000000E4   0x5C40             LDRB     R0,[R0, R1]
    525                       ProbeRS232_Tx1(tx_data);
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x.... 0x....      BL       ProbeRS232_Tx1
    526          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    527                       ProbeRS232_TxChkSum += tx_data;
    528          #endif
    529                       ProbeRS232_TxBufRdIx++;
   \   000000EC   0x....             LDR.N    R0,??DataTable7_9
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x1C40             ADDS     R0,R0,#+1
   \   000000F2   0x....             LDR.N    R1,??DataTable7_9
   \   000000F4   0x6008             STR      R0,[R1, #+0]
    530                       if (ProbeRS232_TxBufRdIx >= ProbeRS232_TxLen) {
   \   000000F6   0x....             LDR.N    R0,??DataTable7_9
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x....             LDR.N    R1,??DataTable7_2
   \   000000FC   0x6809             LDR      R1,[R1, #+0]
   \   000000FE   0x4288             CMP      R0,R1
   \   00000100   0xD305             BCC.N    ??ProbeRS232_TxHandler_17
    531                           ProbeRS232_TxState = PROBE_RS232_TX_STATE_CHKSUM;
   \   00000102   0x....             LDR.N    R0,??DataTable7_1
   \   00000104   0x2109             MOVS     R1,#+9
   \   00000106   0x7001             STRB     R1,[R0, #+0]
    532                           ProbeRS232_TxLen   = 0;
   \   00000108   0x....             LDR.N    R0,??DataTable7_2
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x6001             STR      R1,[R0, #+0]
    533                       }
    534                       break;
   \                     ??ProbeRS232_TxHandler_17:
   \   0000010E   0xE018             B.N      ??ProbeRS232_TxHandler_16
    535          
    536          
    537                  case PROBE_RS232_TX_STATE_CHKSUM:                       /* Tx checksum.                                         */
    538          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    539                       ProbeRS232_Tx1(ProbeRS232_TxChkSum);
    540          #else
    541                       ProbeRS232_Tx1(0);
   \                     ??ProbeRS232_TxHandler_12:
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       ProbeRS232_Tx1
    542          #endif
    543                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_ED;
   \   00000116   0x....             LDR.N    R0,??DataTable7_1
   \   00000118   0x210A             MOVS     R1,#+10
   \   0000011A   0x7001             STRB     R1,[R0, #+0]
    544                       break;
   \   0000011C   0xE011             B.N      ??ProbeRS232_TxHandler_16
    545          
    546          
    547                  case PROBE_RS232_TX_STATE_ED:                           /* Tx end delimiter.                                    */
    548                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_ED);
   \                     ??ProbeRS232_TxHandler_11:
   \   0000011E   0x202F             MOVS     R0,#+47
   \   00000120   0x.... 0x....      BL       ProbeRS232_Tx1
    549                       ProbeRS232_TxState    = PROBE_RS232_TX_STATE_SD0;
   \   00000124   0x....             LDR.N    R0,??DataTable7_1
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x7001             STRB     R1,[R0, #+0]
    550                       ProbeRS232_TxBufInUse = DEF_FALSE;
   \   0000012A   0x....             LDR.N    R0,??DataTable7_4
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x7001             STRB     R1,[R0, #+0]
    551                       break;
   \   00000130   0xE007             B.N      ??ProbeRS232_TxHandler_16
    552          
    553          
    554                  default:
    555                       ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
   \                     ??ProbeRS232_TxHandler_13:
   \   00000132   0x....             LDR.N    R0,??DataTable7_1
   \   00000134   0x2100             MOVS     R1,#+0
   \   00000136   0x7001             STRB     R1,[R0, #+0]
    556                       ProbeRS232_TxActiveFlag = DEF_FALSE;
   \   00000138   0x....             LDR.N    R0,??DataTable7_3
   \   0000013A   0x2100             MOVS     R1,#+0
   \   0000013C   0x7001             STRB     R1,[R0, #+0]
    557                       ProbeRS232_TxIntDis();                             /* No more data to send, dis tx int's.                  */
   \   0000013E   0x.... 0x....      BL       ProbeRS232_TxIntDis
    558                       break;
    559              }
    560          }
   \                     ??ProbeRS232_TxHandler_16:
   \   00000142   0xBD01             POP      {R0,PC}          ;; return
    561          
    562          
    563          /*
    564          *********************************************************************************************************
    565          *********************************************************************************************************
    566          *                                           LOCAL FUNCTIONS
    567          *********************************************************************************************************
    568          *********************************************************************************************************
    569          */
    570          
    571          /*
    572          *********************************************************************************************************
    573          *                                       ProbeRS232_ParseRxPkt()
    574          *
    575          * Description : Parse a received packet & formulate a response.
    576          *
    577          * Argument(s) : none.
    578          *
    579          * Return(s)   : The number of bytes in the data segment of the packet to transmit in response.
    580          *
    581          * Caller(s)   : ProbeRS232_Task(),
    582          *               ProbeRS232_RxPkt().
    583          *
    584          * Note(s)     : none.
    585          *********************************************************************************************************
    586          */
    587          

   \                                 In section .text, align 2, keep-with-next
    588          static  CPU_SIZE_T  ProbeRS232_ParseRxPkt (void)
    589          {
   \                     ProbeRS232_ParseRxPkt:
   \   00000000   0xB580             PUSH     {R7,LR}
    590              CPU_SIZE_T  tx_len;
    591          
    592          
    593              if (ProbeRS232_TxBufInUse == DEF_TRUE) {                    /* Do cmds only if tx buf is free.                      */
   \   00000002   0x....             LDR.N    R0,??DataTable7_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD101             BNE.N    ??ProbeRS232_ParseRxPkt_0
    594                  return (0);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE00A             B.N      ??ProbeRS232_ParseRxPkt_1
    595              }
    596          
    597              ProbeRS232_TxBufInUse = DEF_TRUE;
   \                     ??ProbeRS232_ParseRxPkt_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable7_4
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    598              tx_len                = ProbeCom_ParseRxPkt((void       *)ProbeRS232_RxBuf,
    599                                                          (void       *)ProbeRS232_TxBuf,
    600                                                          (CPU_SIZE_T  )ProbeRS232_RxLen,
    601                                                          (CPU_SIZE_T  )PROBE_RS232_CFG_TX_BUF_SIZE);
   \   00000014   0xF44F 0x7300      MOV      R3,#+512
   \   00000018   0x....             LDR.N    R0,??DataTable7_8
   \   0000001A   0x6802             LDR      R2,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable7_10
   \   0000001E   0x....             LDR.N    R0,??DataTable7_11
   \   00000020   0x.... 0x....      BL       ProbeCom_ParseRxPkt
    602          
    603              return (tx_len);
   \                     ??ProbeRS232_ParseRxPkt_1:
   \   00000024   0xBD02             POP      {R1,PC}          ;; return
    604          }
    605          
    606          
    607          /*
    608          *********************************************************************************************************
    609          *                                         ProbeRS232_RxPkt()
    610          *
    611          * Description : Handle a received packet.
    612          *
    613          * Argument(s) : none.
    614          *
    615          * Return(s)   : none.
    616          *
    617          * Caller(s)   : ProbeRS232_RxHandler().
    618          *
    619          * Note(s)     : none.
    620          *********************************************************************************************************
    621          */
    622          

   \                                 In section .text, align 2, keep-with-next
    623          static  void  ProbeRS232_RxPkt (void)
    624          {
   \                     ProbeRS232_RxPkt:
   \   00000000   0xB580             PUSH     {R7,LR}
    625          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    626              ProbeRS232_OS_Post();                                       /* We have a whole pkt, signal task to parse it.        */
   \   00000002   0x.... 0x....      BL       ProbeRS232_OS_Post
    627          
    628          
    629          
    630          #else
    631          
    632          
    633          
    634          #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
    635              CPU_SR      cpu_sr = 0;
    636          #endif
    637              CPU_SIZE_T  len;
    638          
    639          
    640              len = ProbeRS232_ParseRxPkt();                              /* We have a whole pkt, parse it.                       */
    641              if (len > 0) {
    642                  CPU_CRITICAL_ENTER();
    643                  ProbeRS232_TxLen = len;
    644                  ProbeRS232_TxStart();
    645                  CPU_CRITICAL_EXIT();
    646              }
    647          #endif
    648          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    649          
    650          
    651          /*
    652          *********************************************************************************************************
    653          *                                       ProbeRS232_RxStoINT8U()
    654          *
    655          * Description : Store a byte in the receive buffer.
    656          *
    657          * Argument(s) : rx_data     Byte of data to store in the buffer.
    658          *
    659          * Return(s)   : none.
    660          *
    661          * Caller(s)   : ProbeRS232_RxHandler().
    662          *
    663          * Note(s)     : none.
    664          *********************************************************************************************************
    665          */
    666          

   \                                 In section .text, align 2, keep-with-next
    667          static  void  ProbeRS232_RxStoINT8U (CPU_INT08U rx_data)
    668          {
    669              if (ProbeRS232_RxBufWrIx < PROBE_RS232_CFG_RX_BUF_SIZE) {
   \                     ProbeRS232_RxStoINT8U:
   \   00000000   0x....             LDR.N    R1,??DataTable7_12
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF5B1 0x7F00      CMP      R1,#+512
   \   00000008   0xD208             BCS.N    ??ProbeRS232_RxStoINT8U_0
    670                  ProbeRS232_RxBuf[ProbeRS232_RxBufWrIx++] = rx_data;
   \   0000000A   0x....             LDR.N    R1,??DataTable7_12
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x....             LDR.N    R2,??DataTable7_11
   \   00000010   0x5488             STRB     R0,[R1, R2]
   \   00000012   0x....             LDR.N    R0,??DataTable7_12
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_12
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    671              }
    672          }
   \                     ??ProbeRS232_RxStoINT8U_0:
   \   0000001C   0x4770             BX       LR               ;; return
    673          
    674          
    675          /*
    676          *********************************************************************************************************
    677          *                                        ProbeRS232_RxBufClr()
    678          *
    679          * Description : Clear the data segment buffer write index.
    680          *
    681          * Argument(s) : none.
    682          *
    683          * Return(s)   : none.
    684          *
    685          * Caller(s)   : ProbeRS232_RxHandler().
    686          *
    687          * Note(s)     : none.
    688          *********************************************************************************************************
    689          */
    690          

   \                                 In section .text, align 2, keep-with-next
    691          static  void  ProbeRS232_RxBufClr (void)
    692          {
    693              ProbeRS232_RxBufWrIx = 0;
   \                     ProbeRS232_RxBufClr:
   \   00000000   0x....             LDR.N    R0,??DataTable7_12
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    694          }
   \   00000006   0x4770             BX       LR               ;; return
    695          
    696          
    697          /*
    698          *********************************************************************************************************
    699          *                                        ProbeRS232_TxStart()
    700          *
    701          * Description : Cause transmission to begin.
    702          *
    703          * Argument(s) : none.
    704          *
    705          * Return(s)   : none.
    706          *
    707          * Caller(s)   : ProbeRS232_Task(),
    708          *               ProbeRS232_RxPkt().
    709          *
    710          * Note(s)     : none.
    711          *********************************************************************************************************
    712          */
    713          

   \                                 In section .text, align 2, keep-with-next
    714          static  void  ProbeRS232_TxStart (void)
    715          {
   \                     ProbeRS232_TxStart:
   \   00000000   0xB580             PUSH     {R7,LR}
    716              if (ProbeRS232_TxActiveFlag == DEF_FALSE) {                 /* If no other tx is in progress ...                    */
   \   00000002   0x....             LDR.N    R0,??DataTable7_3
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE.N    ??ProbeRS232_TxStart_0
    717                  ProbeRS232_TxHandler();                                 /*  ... handle tx                ...                    */
   \   0000000A   0x.... 0x....      BL       ProbeRS232_TxHandler
    718                  ProbeRS232_TxIntEn();                                   /*  ... en     tx ints.                                 */
   \   0000000E   0x.... 0x....      BL       ProbeRS232_TxIntEn
    719              }
    720          }
   \                     ??ProbeRS232_TxStart_0:
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ProbeRS232_RxState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ProbeRS232_TxState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ProbeRS232_TxLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ProbeRS232_TxActiveFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ProbeRS232_TxBufInUse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ProbeRS232_RxCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ProbeRS232_TxCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ProbeRS232_RxLenRem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ProbeRS232_RxLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ProbeRS232_TxBufRdIx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ProbeRS232_TxBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ProbeRS232_RxBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ProbeRS232_RxBufWrIx
    721          
    722          
    723          /*
    724          *********************************************************************************************************
    725          *                                              ENABLE END
    726          *
    727          * Note(s) : See 'ENABLE  Note #1'.
    728          *********************************************************************************************************
    729          */
    730          
    731          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ProbeRS232_Init
         8   -> ProbeRS232_InitTarget
         8   -> ProbeRS232_OS_Init
       8   ProbeRS232_ParseRxPkt
         8   -> ProbeCom_ParseRxPkt
       0   ProbeRS232_RxBufClr
       8   ProbeRS232_RxHandler
         8   -> ProbeRS232_RxBufClr
         8   -> ProbeRS232_RxPkt
         8   -> ProbeRS232_RxStoINT8U
       8   ProbeRS232_RxPkt
         8   -> ProbeRS232_OS_Post
       0   ProbeRS232_RxStoINT8U
       8   ProbeRS232_Task
         8   -> ProbeRS232_OS_Pend
         8   -> ProbeRS232_ParseRxPkt
         8   -> ProbeRS232_TxStart
       8   ProbeRS232_TxHandler
         8   -> ProbeRS232_Tx1
         8   -> ProbeRS232_TxIntDis
       8   ProbeRS232_TxStart
         8   -> ProbeRS232_TxHandler
         8   -> ProbeRS232_TxIntEn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      72  ProbeRS232_Init
      38  ProbeRS232_ParseRxPkt
     512  ProbeRS232_RxBuf
       8  ProbeRS232_RxBufClr
       4  ProbeRS232_RxBufWrIx
       4  ProbeRS232_RxCtr
     292  ProbeRS232_RxHandler
       4  ProbeRS232_RxLen
       4  ProbeRS232_RxLenRem
       8  ProbeRS232_RxPkt
       1  ProbeRS232_RxState
      30  ProbeRS232_RxStoINT8U
      26  ProbeRS232_Task
       1  ProbeRS232_TxActiveFlag
     512  ProbeRS232_TxBuf
       1  ProbeRS232_TxBufInUse
       4  ProbeRS232_TxBufRdIx
       4  ProbeRS232_TxCtr
     324  ProbeRS232_TxHandler
       4  ProbeRS232_TxLen
      20  ProbeRS232_TxStart
       1  ProbeRS232_TxState

 
 1 056 bytes in section .bss
   870 bytes in section .text
 
   870 bytes of CODE memory
 1 056 bytes of DATA memory

Errors: none
Warnings: none
