###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      11/Mar/2013  20:18:48 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\BookSrc_CM3_IAR\Software\uCOS-II\Ports\ARM-Cortex-M3\ #
#                    Generic\IAR\os_cpu_c.c                                   #
#    Command line =  C:\BookSrc_CM3_IAR\Software\uCOS-II\Ports\ARM-Cortex-M3\ #
#                    Generic\IAR\os_cpu_c.c -lCN                              #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\List\ -o C:\BookSrc_CM3_IAR\Software\EvalB #
#                    oards\ST\MANGO-Z1\IAR\OS-Probe\Flash\Obj\ --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MA #
#                    NGO-Z1\IAR\OS-Probe\..\BSP\ -I                           #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\CPU\ST\STM32\inc\ -I              #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-CPU\ -I                        #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\ -I      #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-LCD\Source\ -I                 #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-LIB\ -I                        #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Gener #
#                    ic\IAR\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MAN #
#                    GO-Z1\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\ -I     #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Gen #
#                    eric\RS-232\Source\ -I C:\BookSrc_CM3_IAR\Software\EvalB #
#                    oards\ST\MANGO-Z1\IAR\OS-Probe\..\..\..\..\..\uC-Probe\T #
#                    arget\Communication\Generic\RS-232\Ports\ST\STM32\ -I    #
#                    C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Gen #
#                    eric\Source\ -I C:\BookSrc_CM3_IAR\Software\EvalBoards\S #
#                    T\MANGO-Z1\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\P #
#                    lugins\uCOS-II\ -Ol --use_c++_inline                     #
#    List file    =  C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\List\os_cpu_c.lst                          #
#    Object file  =  C:\BookSrc_CM3_IAR\Software\EvalBoards\ST\MANGO-Z1\IAR\O #
#                    S-Probe\Flash\Obj\os_cpu_c.o                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\BookSrc_CM3_IAR\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_CPU_C.C
     13          * Version   : V2.86
     14          * By        : Jean J. Labrosse
     15          *             Brian Nagel
     16          *
     17          * For       : ARMv7M Cortex-M3
     18          * Mode      : Thumb2
     19          * Toolchain : IAR EWARM
     20          *********************************************************************************************************
     21          */
     22          
     23          #define  OS_CPU_GLOBALS
     24          #include <ucos_ii.h>
     25          
     26          /*
     27          *********************************************************************************************************
     28          *                                          LOCAL VARIABLES
     29          *********************************************************************************************************
     30          */
     31          
     32          #if OS_TMR_EN > 0
     33          static  INT16U  OSTmrCtr;
     34          #endif
     35          
     36          /*
     37          *********************************************************************************************************
     38          *                                          SYS TICK DEFINES
     39          *********************************************************************************************************
     40          */
     41          
     42          #define  OS_CPU_CM3_NVIC_ST_CTRL    (*((volatile INT32U *)0xE000E010))   /* SysTick Ctrl & Status Reg. */
     43          #define  OS_CPU_CM3_NVIC_ST_RELOAD  (*((volatile INT32U *)0xE000E014))   /* SysTick Reload  Value Reg. */
     44          #define  OS_CPU_CM3_NVIC_ST_CURRENT (*((volatile INT32U *)0xE000E018))   /* SysTick Current Value Reg. */
     45          #define  OS_CPU_CM3_NVIC_ST_CAL     (*((volatile INT32U *)0xE000E01C))   /* SysTick Cal     Value Reg. */
     46          #define  OS_CPU_CM3_NVIC_PRIO_ST    (*((volatile INT8U  *)0xE000ED23))   /* SysTick Handler Prio  Reg. */
     47          
     48          #define  OS_CPU_CM3_NVIC_ST_CTRL_COUNT                    0x00010000     /* Count flag.                */
     49          #define  OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC                  0x00000004     /* Clock Source.              */
     50          #define  OS_CPU_CM3_NVIC_ST_CTRL_INTEN                    0x00000002     /* Interrupt enable.          */
     51          #define  OS_CPU_CM3_NVIC_ST_CTRL_ENABLE                   0x00000001     /* Counter mode.              */
     52          #define  OS_CPU_CM3_NVIC_PRIO_MIN                               0xFF     /* Min handler prio.          */
     53          
     54          /*
     55          *********************************************************************************************************
     56          *                                       OS INITIALIZATION HOOK
     57          *                                            (BEGINNING)
     58          *
     59          * Description: This function is called by OSInit() at the beginning of OSInit().
     60          *
     61          * Arguments  : none
     62          *
     63          * Note(s)    : 1) Interrupts should be disabled during this call.
     64          *********************************************************************************************************
     65          */
     66          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
     67          void  OSInitHookBegin (void)
     68          {
     69          #if OS_TMR_EN > 0
     70              OSTmrCtr = 0;
     71          #endif
     72          }
   \                     OSInitHookBegin:
   \   00000000   0x4770             BX       LR               ;; return
     73          #endif
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                       OS INITIALIZATION HOOK
     78          *                                               (END)
     79          *
     80          * Description: This function is called by OSInit() at the end of OSInit().
     81          *
     82          * Arguments  : none
     83          *
     84          * Note(s)    : 1) Interrupts should be disabled during this call.
     85          *********************************************************************************************************
     86          */
     87          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
     88          void  OSInitHookEnd (void)
     89          {
     90          }
   \                     OSInitHookEnd:
   \   00000000   0x4770             BX       LR               ;; return
     91          #endif
     92          
     93          /*
     94          *********************************************************************************************************
     95          *                                          TASK CREATION HOOK
     96          *
     97          * Description: This function is called when a task is created.
     98          *
     99          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
    100          *
    101          * Note(s)    : 1) Interrupts are disabled during this call.
    102          *********************************************************************************************************
    103          */
    104          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    105          void  OSTaskCreateHook (OS_TCB *ptcb)
    106          {
   \                     OSTaskCreateHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    107          #if OS_APP_HOOKS_EN > 0
    108              App_TaskCreateHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TaskCreateHook
    109          #else
    110              (void)ptcb;                                  /* Prevent compiler warning                           */
    111          #endif
    112          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    113          #endif
    114          
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                           TASK DELETION HOOK
    119          *
    120          * Description: This function is called when a task is deleted.
    121          *
    122          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
    123          *
    124          * Note(s)    : 1) Interrupts are disabled during this call.
    125          *********************************************************************************************************
    126          */
    127          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    128          void  OSTaskDelHook (OS_TCB *ptcb)
    129          {
   \                     OSTaskDelHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    130          #if OS_APP_HOOKS_EN > 0
    131              App_TaskDelHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TaskDelHook
    132          #else
    133              (void)ptcb;                                  /* Prevent compiler warning                           */
    134          #endif
    135          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    136          #endif
    137          
    138          /*
    139          *********************************************************************************************************
    140          *                                             IDLE TASK HOOK
    141          *
    142          * Description: This function is called by the idle task.  This hook has been added to allow you to do
    143          *              such things as STOP the CPU to conserve power.
    144          *
    145          * Arguments  : none
    146          *
    147          * Note(s)    : 1) Interrupts are enabled during this call.
    148          *********************************************************************************************************
    149          */
    150          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
    151          void  OSTaskIdleHook (void)
    152          {
   \                     OSTaskIdleHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    153          #if OS_APP_HOOKS_EN > 0
    154              App_TaskIdleHook();
   \   00000002   0x.... 0x....      BL       App_TaskIdleHook
    155          #endif
    156          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    157          #endif
    158          
    159          /*
    160          *********************************************************************************************************
    161          *                                           STATISTIC TASK HOOK
    162          *
    163          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your
    164          *              application to add functionality to the statistics task.
    165          *
    166          * Arguments  : none
    167          *********************************************************************************************************
    168          */
    169          
    170          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    171          void  OSTaskStatHook (void)
    172          {
   \                     OSTaskStatHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    173          #if OS_APP_HOOKS_EN > 0
    174              App_TaskStatHook();
   \   00000002   0x.... 0x....      BL       App_TaskStatHook
    175          #endif
    176          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    177          #endif
    178          
    179          /*
    180          *********************************************************************************************************
    181          *                                        INITIALIZE A TASK'S STACK
    182          *
    183          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    184          *              stack frame of the task being created.  This function is highly processor specific.
    185          *
    186          * Arguments  : task          is a pointer to the task code
    187          *
    188          *              p_arg         is a pointer to a user supplied data area that will be passed to the task
    189          *                            when the task first executes.
    190          *
    191          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    192          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then
    193          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    194          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    195          *                            of the stack.
    196          *
    197          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    198          *                            (see uCOS_II.H for OS_TASK_OPT_xxx).
    199          *
    200          * Returns    : Always returns the location of the new top-of-stack once the processor registers have
    201          *              been placed on the stack in the proper order.
    202          *
    203          * Note(s)    : 1) Interrupts are enabled when your task starts executing.
    204          *              2) All tasks run in Thread mode, using process stack.
    205          *********************************************************************************************************
    206          */
    207          

   \                                 In section .text, align 2, keep-with-next
    208          OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
    209          {
   \                     OSTaskStkInit:
   \   00000000   0x0003             MOVS     R3,R0
   \   00000002   0x0010             MOVS     R0,R2
    210              OS_STK *stk;
    211          
    212          
    213              (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    214              stk       = ptos;                            /* Load stack pointer                                 */
    215          
    216                                                           /* Registers stacked as if auto-saved on exception    */
    217              *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
   \   00000004   0xF05F 0x7280      MOVS     R2,#+16777216
   \   00000008   0x6002             STR      R2,[R0, #+0]
    218              *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
   \   0000000A   0x1F00             SUBS     R0,R0,#+4
   \   0000000C   0x6003             STR      R3,[R0, #+0]
    219              *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
   \   0000000E   0x1F00             SUBS     R0,R0,#+4
   \   00000010   0xF07F 0x0201      MVNS     R2,#+1
   \   00000014   0x6002             STR      R2,[R0, #+0]
    220              *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
   \   00000016   0x1F00             SUBS     R0,R0,#+4
   \   00000018   0xF05F 0x3212      MOVS     R2,#+303174162
   \   0000001C   0x6002             STR      R2,[R0, #+0]
    221              *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
   \   0000001E   0x1F00             SUBS     R0,R0,#+4
   \   00000020   0xF05F 0x3203      MOVS     R2,#+50529027
   \   00000024   0x6002             STR      R2,[R0, #+0]
    222              *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
   \   00000026   0x1F00             SUBS     R0,R0,#+4
   \   00000028   0xF05F 0x3202      MOVS     R2,#+33686018
   \   0000002C   0x6002             STR      R2,[R0, #+0]
    223              *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
   \   0000002E   0x1F00             SUBS     R0,R0,#+4
   \   00000030   0xF05F 0x3201      MOVS     R2,#+16843009
   \   00000034   0x6002             STR      R2,[R0, #+0]
    224              *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
   \   00000036   0x1F00             SUBS     R0,R0,#+4
   \   00000038   0x6001             STR      R1,[R0, #+0]
    225          
    226                                                           /* Remaining registers saved on process stack         */
    227              *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
   \   0000003A   0x1F00             SUBS     R0,R0,#+4
   \   0000003C   0xF05F 0x3111      MOVS     R1,#+286331153
   \   00000040   0x6001             STR      R1,[R0, #+0]
    228              *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
   \   00000042   0x1F00             SUBS     R0,R0,#+4
   \   00000044   0xF05F 0x3110      MOVS     R1,#+269488144
   \   00000048   0x6001             STR      R1,[R0, #+0]
    229              *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
   \   0000004A   0x1F00             SUBS     R0,R0,#+4
   \   0000004C   0xF05F 0x3109      MOVS     R1,#+151587081
   \   00000050   0x6001             STR      R1,[R0, #+0]
    230              *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
   \   00000052   0x1F00             SUBS     R0,R0,#+4
   \   00000054   0xF05F 0x3108      MOVS     R1,#+134744072
   \   00000058   0x6001             STR      R1,[R0, #+0]
    231              *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
   \   0000005A   0x1F00             SUBS     R0,R0,#+4
   \   0000005C   0xF05F 0x3107      MOVS     R1,#+117901063
   \   00000060   0x6001             STR      R1,[R0, #+0]
    232              *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
   \   00000062   0x1F00             SUBS     R0,R0,#+4
   \   00000064   0xF05F 0x3106      MOVS     R1,#+101058054
   \   00000068   0x6001             STR      R1,[R0, #+0]
    233              *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
   \   0000006A   0x1F00             SUBS     R0,R0,#+4
   \   0000006C   0xF05F 0x3105      MOVS     R1,#+84215045
   \   00000070   0x6001             STR      R1,[R0, #+0]
    234              *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
   \   00000072   0x1F00             SUBS     R0,R0,#+4
   \   00000074   0xF05F 0x3104      MOVS     R1,#+67372036
   \   00000078   0x6001             STR      R1,[R0, #+0]
    235          
    236              return (stk);
   \   0000007A   0x4770             BX       LR               ;; return
    237          }
    238          
    239          /*
    240          *********************************************************************************************************
    241          *                                           TASK SWITCH HOOK
    242          *
    243          * Description: This function is called when a task switch is performed.  This allows you to perform other
    244          *              operations during a context switch.
    245          *
    246          * Arguments  : none
    247          *
    248          * Note(s)    : 1) Interrupts are disabled during this call.
    249          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    250          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    251          *                 task being switched out (i.e. the preempted task).
    252          *********************************************************************************************************
    253          */
    254          #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    255          void  OSTaskSwHook (void)
    256          {
   \                     OSTaskSwHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    257          #if OS_APP_HOOKS_EN > 0
    258              App_TaskSwHook();
   \   00000002   0x.... 0x....      BL       App_TaskSwHook
    259          #endif
    260          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    261          #endif
    262          
    263          /*
    264          *********************************************************************************************************
    265          *                                           OS_TCBInit() HOOK
    266          *
    267          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    268          *
    269          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    270          *
    271          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    272          *********************************************************************************************************
    273          */
    274          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
    275          void  OSTCBInitHook (OS_TCB *ptcb)
    276          {
   \                     OSTCBInitHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    277          #if OS_APP_HOOKS_EN > 0
    278              App_TCBInitHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TCBInitHook
    279          #else
    280              (void)ptcb;                                  /* Prevent compiler warning                           */
    281          #endif
    282          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    283          #endif
    284          
    285          /*
    286          *********************************************************************************************************
    287          *                                               TICK HOOK
    288          *
    289          * Description: This function is called every tick.
    290          *
    291          * Arguments  : none
    292          *
    293          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    294          *********************************************************************************************************
    295          */
    296          #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    297          void  OSTimeTickHook (void)
    298          {
   \                     OSTimeTickHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    299          #if OS_APP_HOOKS_EN > 0
    300              App_TimeTickHook();
   \   00000002   0x.... 0x....      BL       App_TimeTickHook
    301          #endif
    302          
    303          #if OS_TMR_EN > 0
    304              OSTmrCtr++;
    305              if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
    306                  OSTmrCtr = 0;
    307                  OSTmrSignal();
    308              }
    309          #endif
    310          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    311          #endif
    312          
    313          /*
    314          *********************************************************************************************************
    315          *                                         OS_CPU_SysTickHandler()
    316          *
    317          * Description: Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick
    318          *              interrupt.
    319          *
    320          * Arguments  : none.
    321          *
    322          * Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
    323          *********************************************************************************************************
    324          */
    325          

   \                                 In section .text, align 2, keep-with-next
    326          void  OS_CPU_SysTickHandler (void)
    327          {
   \                     OS_CPU_SysTickHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    328              OS_CPU_SR  cpu_sr;
    329          
    330          
    331              OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
    332              OSIntNesting++;
   \   00000006   0x....             LDR.N    R1,??DataTable1
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0x....             LDR.N    R2,??DataTable1
   \   0000000E   0x7011             STRB     R1,[R2, #+0]
    333              OS_EXIT_CRITICAL();
   \   00000010   0x.... 0x....      BL       OS_CPU_SR_Restore
    334          
    335              OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
   \   00000014   0x.... 0x....      BL       OSTimeTick
    336          
    337              OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
   \   00000018   0x.... 0x....      BL       OSIntExit
    338          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    339          
    340          /*
    341          *********************************************************************************************************
    342          *                                          OS_CPU_SysTickInit()
    343          *
    344          * Description: Initialize the SysTick.
    345          *
    346          * Arguments  : none.
    347          *
    348          * Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
    349          *********************************************************************************************************
    350          */
    351          

   \                                 In section .text, align 2, keep-with-next
    352          void  OS_CPU_SysTickInit (void)
    353          {
   \                     OS_CPU_SysTickInit:
   \   00000000   0xB580             PUSH     {R7,LR}
    354              INT32U  cnts;
    355          
    356          
    357              cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
   \   00000002   0x.... 0x....      BL       OS_CPU_SysTickClkFreq
   \   00000006   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    358          
    359              OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable1_1  ;; 0xe000e014
   \   00000012   0x6008             STR      R0,[R1, #+0]
    360                                                           /* Set prio of SysTick handler to min prio.           */
    361              OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
   \   00000014   0x....             LDR.N    R0,??DataTable1_2  ;; 0xe000ed23
   \   00000016   0x21FF             MOVS     R1,#+255
   \   00000018   0x7001             STRB     R1,[R0, #+0]
    362                                                           /* Enable timer.                                      */
    363              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
   \   0000001A   0x....             LDR.N    R0,??DataTable1_3  ;; 0xe000e010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0005      ORRS     R0,R0,#0x5
   \   00000022   0x....             LDR.N    R1,??DataTable1_3  ;; 0xe000e010
   \   00000024   0x6008             STR      R0,[R1, #+0]
    364                                                           /* Enable timer interrupt.                            */
    365              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
   \   00000026   0x....             LDR.N    R0,??DataTable1_3  ;; 0xe000e010
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000002E   0x....             LDR.N    R1,??DataTable1_3  ;; 0xe000e010
   \   00000030   0x6008             STR      R0,[R1, #+0]
    366          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000ED23         DC32     0xe000ed23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E010         DC32     0xe000e010

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSInitHookBegin
       0   OSInitHookEnd
       8   OSTCBInitHook
         8   -> App_TCBInitHook
       8   OSTaskCreateHook
         8   -> App_TaskCreateHook
       8   OSTaskDelHook
         8   -> App_TaskDelHook
       8   OSTaskIdleHook
         8   -> App_TaskIdleHook
       8   OSTaskStatHook
         8   -> App_TaskStatHook
       0   OSTaskStkInit
       8   OSTaskSwHook
         8   -> App_TaskSwHook
       8   OSTimeTickHook
         8   -> App_TimeTickHook
       8   OS_CPU_SysTickHandler
         8   -> OSIntExit
         8   -> OSTimeTick
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save
       8   OS_CPU_SysTickInit
         8   -> OS_CPU_SysTickClkFreq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       2  OSInitHookBegin
       2  OSInitHookEnd
       8  OSTCBInitHook
       8  OSTaskCreateHook
       8  OSTaskDelHook
       8  OSTaskIdleHook
       8  OSTaskStatHook
     124  OSTaskStkInit
       8  OSTaskSwHook
       8  OSTimeTickHook
      30  OS_CPU_SysTickHandler
      52  OS_CPU_SysTickInit

 
 282 bytes in section .text
 
 282 bytes of CODE memory

Errors: none
Warnings: none
